---
- name: Add the Server Density repository signing key (Debian/Ubuntu)
  apt_key:
    id: "74371316"
    url: https://archive.serverdensity.com/sd-packaging-public.key
  when: ansible_os_family == "Debian"

- name: Set repository release (Debian/Ubuntu)
  set_fact:
    repo_release: "{% if ansible_distribution_release in item.value %} {{ item.key }} {% else %} {{ ansible_distribution_release }} {% endif %}"
  with_dict: "{{ ubuntu_repos }}"
  when: ansible_os_family == "Debian"

- name: Add Server Density repository (Debian/Ubuntu)
  apt_repository:
    repo: "{{ item }}"
    state: present
  with_items:
    - "deb https://archive.serverdensity.com/{{ ansible_distribution|lower }} {{ repo_release }} main"
  when: ansible_os_family == "Debian"

- name: Copy Server Density repository signing key (RedHat/CentOS)
  get_url:
    url: https://archive.serverdensity.com/sd-packaging-public.key
    dest: /etc/pki/rpm-gpg/RPM-GPG-KEY-serverdensity
    owner: root
    group: root
    mode: 0644
  when: ansible_os_family == "RedHat"

- name: Install Server Density repository signing key (RedHat/CentOS)
  command: rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-serverdensity
  when: ansible_os_family == "RedHat"

- name: Add Server Density repository (RedHat/CentOS)
  copy:
    src: serverdensity.repo
    dest: /etc/yum.repos.d/serverdensity.repo
    owner: root
    group: root
    mode: 0644
  when: ansible_os_family == "RedHat" and ansible_distribution != "Amazon"

- name: Add Server Density repository (Amazon)
  copy:
    src: serverdensity-amazon.repo
    dest: /etc/yum.repos.d/serverdensity.repo
    owner: root
    group: root
    mode: 0644
  when: ansible_distribution == "Amazon" and ansible_os_family == "RedHat"

- name: Set repository release (RedHat/CentOS 6)
  set_fact:
    ius_location: "{% if ansible_distribution == 'CentOS' %}centos{% else %}rhel{% endif %}"
  when: ansible_os_family == "RedHat" and ansible_distribution_version.split('.')[0] == "6"

- name: Install epel and ius repositories (RedHat/CentOS)
  yum:
    name:
      - https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm
      - https://{{ius_location}}6.iuscommunity.org/ius-release.rpm
    state: present
  when: ansible_os_family == "RedHat" and ansible_distribution_version.split('.')[0] == "6"

- name: Install/Update Server Density agent (Debian/Ubuntu)
  apt:
    name: sd-agent
    state: latest
    update-cache: yes
    cache_valid_time: 86400
  notify: restart sd-agent
  when: ansible_os_family == "Debian"

- name: Install/Update Server Density agent (RedHat/CentOS)
  yum:
    name: sd-agent
    state: latest
  notify: restart sd-agent
  when: ansible_os_family == "RedHat"

- name: Getting some extra facts
  action: ec2_metadata_facts
  when: "'amazon' in ansible_bios_version"

- name: Check to see if we previously upgraded the Server Density agent from v1 to v2
  stat:
    path: /var/log/sd-upgrade-v2-key.log.json
  register: upgraded

- name: Attempt to lookup device with the Server Density API - non AWS
  uri:
    url: https://api.serverdensity.io/inventory/resources?token={{ api_token }}&filter=%7B%22name%22%3A%22{{ sd_hostname | default(ansible_hostname) }}%22%2C%20%22type%22%3A%20%22device%22%7D
    status_code: 200
    dest: /var/log/sd-agent-v2-install.log.json
  register: http_response
  until: http_response.status == 200
  retries: 60
  delay: 1
  when: not upgraded.stat.exists and ansible_ec2_instance_id is undefined

- name: Register device with the Server Density API - non AWS
  uri:
    url: https://api.serverdensity.io/inventory/devices/?token={{ api_token }}
    method: POST
    body: "name={{ sd_hostname | default(ansible_hostname) }}&group={{ group_name}}"
    dest: /var/log/sd-agent-v2-install.log.json
    status_code: 200
  until: non_aws_response.status == 200
  retries: 60
  delay: 1
  register: non_aws_response
  when: not upgraded.stat.exists and ansible_ec2_instance_id is undefined and http_response.x_total_number == "0"

- name: Attempt to lookup device with the Server Density API - AWS
  uri:
    url: https://api.serverdensity.io/inventory/resources?token={{ api_token }}&filter=%7b%22providerId%22%3a%22{{ ansible_ec2_instance_id }}%22%2c%22provider%22%3a%22amazon%22%7d
    status_code: 200
    dest: /var/log/sd-agent-v2-install.log.json
  until: aws_response.status == 200
  retries: 60
  delay: 1
  register: aws_response
  when: not upgraded.stat.exists and ansible_ec2_instance_id is defined

- name: Register device with the Server Density API - AWS
  uri:
    url: https://api.serverdensity.io/inventory/devices/?token={{ api_token }}
    method: POST
    body: "name={{ sd_hostname | default(ansible_ec2_instance_id) }}&group={{ group_name}}&provider=amazon&providerId={{ ansible_ec2_instance_id }}"
    status_code: 200
    dest: /var/log/sd-agent-v2-install.log.json
  until: aws_register.status == 200
  retries: 60
  delay: 1
  register: aws_register
  when: not upgraded.stat.exists and ansible_ec2_instance_id is defined and aws_response.x_total_number == "0"

- name: Remove from list
  replace:
    dest=/var/log/sd-agent-v2-install.log.json
    regexp="{{ item.regexp }}"
    replace="{{ item.replace }}"
  with_items:
    - { regexp: '^\[', replace: '' }
    - { regexp: '\]$', replace: '' }
  when: (aws_response and aws_response.x_total_number is defined and aws_response.x_total_number > 0) or (http_response and http_response.x_total_number is defined and http_response.x_total_number > 0)

- name: Register JSON
  command: cat /var/log/sd-agent-v2-install.log.json
  register: result
  when: not upgraded.stat.exists

- name: Register JSON upgraded
  command: cat /var/log/sd-upgrade-v2-key.log.json
  register: result_upgraded
  when: upgraded.stat.exists

- name: Set fact agent_group
  set_fact:
   agent_group: "{{ item }}"
  with_items: "{{aws_response|json_query('json[*].group')}}"
  when: aws_response is defined

- block:
    - name: Set fact agent_id
      set_fact:
       agent_id: "{{ item }}"
      with_items: "{{aws_response|json_query('json[*]._id')}}"

    - name: Update Group name when is not defined
      uri:
        url: https://api.serverdensity.io/inventory/devices/{{agent_id }}?token={{ api_token }}
        method: PUT
        body: "group={{ group_name }}"
        status_code: 200
        dest: /var/log/sd-agent-v2-install.log.json
  when: group_name is defined and agent_group is not defined and ansible_ec2_instance_id is defined

- name: Set JSON to variable
  set_fact:
    api_result: "{{ result.stdout|from_json }}"
  when: not upgraded.stat.exists

- name: Set JSON to variable upgraded
  set_fact:
    api_result: "{{ result_upgraded.stdout|from_json }}"
  when: upgraded.stat.exists
